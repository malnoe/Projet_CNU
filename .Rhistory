})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(bslib)
library(markdown)
library(shinyjs)
library(digest)
# Simuler une base de données utilisateur
users <- data.frame(
username = c("user1", "user2"),
password = sapply(c("password1", "password2"), digest), # Mots de passe hashés
stringsAsFactors = FALSE
)
ui <- fluidPage(
shinyjs::useShinyjs(),
navbarPage(
"App projet",
# Page où le rapporteur peut étudier le dossier + émettre son avis.
tabPanel("Avis du rapporteur",
uiOutput("avisPanel")
),
# Page contenant les statistiques sur les avis déjà émis.
tabPanel("Statistiques",
sidebarLayout(
sidebarPanel("Bouttons pour la sélection des stats à afficher"),
mainPanel("Graphiques / Informations statistiques liées aux candidatures")
)
),
# Page de connexion
tabPanel("Connexion",
fluidRow(
column(4, offset = 4,
uiOutput("authUI"), # Interface conditionnelle
textOutput("login_status")
)
)
)
)
)
server <- function(input, output, session) {
# État de connexion
user <- reactiveVal(NULL)  # NULL = pas connecté
# Gestion de l'interface de connexion
output$authUI <- renderUI({
if (is.null(user())) {
# Afficher les champs pour se connecter si non connecté
tagList(
textInput("username", "Nom d'utilisateur"),
passwordInput("password", "Mot de passe"),
actionButton("login", "Connexion")
)
} else {
# Afficher le bouton de déconnexion si connecté
actionButton("logout", "Déconnexion")
}
})
# Gestion de la connexion
observeEvent(input$login, {
req(input$username, input$password)  # Les champs ne doivent pas être vides
# Vérification des identifiants
matched_user <- users[users$username == input$username, ]
if (nrow(matched_user) == 1 &&
digest(input$password) == matched_user$password) {
user(input$username)  # Stocker l'utilisateur connecté
shinyjs::alert("Connexion réussie !")
updateTextInput(session, "username", value = "")  # Réinitialiser les champs
updateTextInput(session, "password", value = "")
} else {
user(NULL)
output$login_status <- renderText("Identifiants incorrects")
}
})
# Gestion de la déconnexion
observeEvent(input$logout, {
user(NULL)  # Réinitialiser l'état utilisateur
shinyjs::alert("Déconnexion réussie !")
# Effacer les champs pour éviter les résidus après déconnexion
updateTextInput(session, "username", value = "")
updateTextInput(session, "password", value = "")
})
# Bouton "Terminé"
observeEvent(input$checkTermine,{
if(length(input$checkGroupeModalites)==0 || !(input$selectAvis %in% c("Très favorable", "Favorable", "Réservé"))){
alert("Il faut sélectionner des cases")
}
else{
alert("Is ok. Save + marqué comme terminé.")
}
})
# UI Page Avis rapporteur
output$avisPanel <- renderUI({
if (!is.null(user())) {
# Boutons et éléments pour l'avis
sidebarLayout(
sidebarPanel(
actionButton("buttonMenu", label = "Menu"),
actionButton("buttonSave", label = "Sauvegarder"),
actionButton("checkTermine", label = "J'ai terminé"),
selectInput("selectAvis", label = "Avis", choices = list("","Très favorable", "Favorable", "Réservé"), selected = NULL),
checkboxGroupInput(
"checkGroupeModalites",
"Modalités d'attribution",
choices = list("M1 (Ens)" = 1, "M2 (Rech)" = 2, "M3 (OIP)" = 3, "M4 (Diff)" = 4, "M5 (Eur)" = 5, "M6 (Coop)" = 6, "M7 (Invest)" = 7)
),
actionButton("buttonUploadPreRapport", label = "Déposer un pré-rapport (PDF)")
),
mainPanel(
actionButton("buttonTelechargeDossier", label = "Télécharger le dossier du/de la candidat.e (PDF)"),
card("PDF ou texte comprenant les informations de la candidature")
)
)
} else {
# Message de non-connexion
mainPanel("Vous n'êtes pas connecté. Connectez-vous pour accéder à cette page.")
}
})
}
shinyApp(ui = ui, server = server)
# Simuler une base de données utilisateur
users <- data.frame(
username = c("user1", "user2"),
password = sapply(c("password1", "password2"), digest), # Mots de passe hashés
stringsAsFactors = FALSE
)
ui <- fluidPage(
shinyjs::useShinyjs(),
navbarPage(
"App projet",
# Page où le rapporteur peut étudier le dossier + émettre son avis.
tabPanel("Avis du rapporteur",
uiOutput("avisPanel")
),
# Page contenant les statistiques sur les avis déjà émis.
tabPanel("Statistiques",
sidebarLayout(
sidebarPanel("Bouttons pour la sélection des stats à afficher"),
mainPanel("Graphiques / Informations statistiques liées aux candidatures")
)
),
# Page de connexion
tabPanel("Connexion",
fluidRow(
column(4, offset = 4,
uiOutput("authUI"), # Interface conditionnelle
textOutput("login_status") # Message d'erreur ou succès
)
)
)
)
)
server <- function(input, output, session) {
# État de connexion
user <- reactiveVal(NULL)  # NULL = pas connecté
# Gestion de l'interface de connexion
output$authUI <- renderUI({
if (is.null(user())) {
# Afficher les champs pour se connecter si non connecté
tagList(
textInput("username", "Nom d'utilisateur"),
passwordInput("password", "Mot de passe"),
actionButton("login", "Connexion")
)
} else {
# Afficher le bouton de déconnexion si connecté
actionButton("logout", "Déconnexion")
}
})
# Gestion du message d'état
login_status <- reactiveVal("") # Message réactif
output$login_status <- renderText({
login_status()
})
# Gestion de la connexion
observeEvent(input$login, {
req(input$username, input$password)  # Les champs ne doivent pas être vides
# Vérification des identifiants
matched_user <- users[users$username == input$username, ]
if (nrow(matched_user) == 1 &&
digest(input$password) == matched_user$password) {
user(input$username)  # Stocker l'utilisateur connecté
shinyjs::alert("Connexion réussie !")
# Effacer le message d'erreur et réinitialiser les champs
login_status("")
updateTextInput(session, "username", value = "")
updateTextInput(session, "password", value = "")
} else {
login_status("Identifiants incorrects")
# Effacer le message d'erreur après 3 secondes
shinyjs::delay(3000, login_status(""))
}
})
# Gestion de la déconnexion
observeEvent(input$logout, {
user(NULL)  # Réinitialiser l'état utilisateur
shinyjs::alert("Déconnexion réussie !")
# Effacer les champs pour éviter les résidus après déconnexion
updateTextInput(session, "username", value = "")
updateTextInput(session, "password", value = "")
login_status("") # Réinitialiser le message d'état
})
# Bouton "Terminé"
observeEvent(input$checkTermine,{
if(length(input$checkGroupeModalites)==0 || !(input$selectAvis %in% c("Très favorable", "Favorable", "Réservé"))){
alert("Il faut sélectionner des cases")
}
else{
alert("Is ok. Save + marqué comme terminé.")
}
})
# UI Page Avis rapporteur
output$avisPanel <- renderUI({
if (!is.null(user())) {
# Boutons et éléments pour l'avis
sidebarLayout(
sidebarPanel(
actionButton("buttonMenu", label = "Menu"),
actionButton("buttonSave", label = "Sauvegarder"),
actionButton("checkTermine", label = "J'ai terminé"),
selectInput("selectAvis", label = "Avis", choices = list("","Très favorable", "Favorable", "Réservé"), selected = NULL),
checkboxGroupInput(
"checkGroupeModalites",
"Modalités d'attribution",
choices = list("M1 (Ens)" = 1, "M2 (Rech)" = 2, "M3 (OIP)" = 3, "M4 (Diff)" = 4, "M5 (Eur)" = 5, "M6 (Coop)" = 6, "M7 (Invest)" = 7)
),
actionButton("buttonUploadPreRapport", label = "Déposer un pré-rapport (PDF)")
),
mainPanel(
actionButton("buttonTelechargeDossier", label = "Télécharger le dossier du/de la candidat.e (PDF)"),
card("PDF ou texte comprenant les informations de la candidature")
)
)
} else {
# Message de non-connexion
mainPanel("Vous n'êtes pas connecté. Connectez-vous pour accéder à cette page.")
}
})
}
shinyApp(ui = ui, server = server)
install.packages("shinyauthr")
library(shinyauthr)
install.packages("libsodium")
install.packages("shinyauthr")
library(shinyauthr)
library(shiny)
library(bslib)
library(markdown)
library(shinyjs)
ui <- fluidPage(
shinyjs::useShinyjs(),
navbarPage(
"App projet",
# Page où le rapporteur peut étudier le dossier + émettre son avis
tabPanel("Avis du rapporteur",
uiOutput("avisPanel")
),
# Page contenant les statistiques sur les avis déjà émis
tabPanel("Statistiques",
sidebarLayout(
sidebarPanel("Bouttons pour la sélection des stats à afficher"),
mainPanel("Graphiques / Informations statistiques liées aux candidatures")
)
),
# Page de connexion avec `shinyauthr`
tabPanel("Connexion",
auth_ui(id = "auth")
)
)
)
library(shinyauthr)
install.packages("shinyauthr")
install.packages("shinyauthr")
library(shinyauthr)
library(shiny)
library(bslib)
library(markdown)
library(shinyjs)
ui <- fluidPage(
shinyjs::useShinyjs(),
navbarPage(
"App projet",
# Page où le rapporteur peut étudier le dossier + émettre son avis
tabPanel("Avis du rapporteur",
uiOutput("avisPanel")
),
# Page contenant les statistiques sur les avis déjà émis
tabPanel("Statistiques",
sidebarLayout(
sidebarPanel("Bouttons pour la sélection des stats à afficher"),
mainPanel("Graphiques / Informations statistiques liées aux candidatures")
)
),
# Page de connexion avec `shinyauthr`
tabPanel("Connexion",
auth_ui(id = "auth")
)
)
)
library(shinyauthr)
library(shiny)
library(bslib)
library(markdown)
library(shinyjs)
ui <- fluidPage(
shinyjs::useShinyjs(),
navbarPage(
"App projet",
# Page où le rapporteur peut étudier le dossier + émettre son avis
tabPanel("Avis du rapporteur",
uiOutput("avisPanel")
),
# Page contenant les statistiques sur les avis déjà émis
tabPanel("Statistiques",
sidebarLayout(
sidebarPanel("Bouttons pour la sélection des stats à afficher"),
mainPanel("Graphiques / Informations statistiques liées aux candidatures")
)
),
# Page de connexion avec `shinyauthr`
tabPanel("Connexion",
auth_ui(id = "auth")
)
)
)
library(shinyauthr)
library(shiny)
library(bslib)
library(markdown)
library(shinyjs)
ui <- fluidPage(
shinyjs::useShinyjs(),
navbarPage(
"App projet",
# Page où le rapporteur peut étudier le dossier + émettre son avis
tabPanel("Avis du rapporteur",
uiOutput("avisPanel")
),
# Page contenant les statistiques sur les avis déjà émis
tabPanel("Statistiques",
sidebarLayout(
sidebarPanel("Bouttons pour la sélection des stats à afficher"),
mainPanel("Graphiques / Informations statistiques liées aux candidatures")
)
),
# Page de connexion avec `shinyauthr`
tabPanel("Connexion",
loginUI(id = "auth")  # Utilisation de loginUI pour afficher l'interface de connexion
)
)
)
server <- function(input, output, session) {
# Gestion de la connexion avec loginServer
# data est un data.frame qui contient les utilisateurs et mots de passe
login_details <- data.frame(
username = c("user1", "user2"),
password = c("password1", "password2"),
stringsAsFactors = FALSE
)
user_info <- loginServer(
id = "auth",  # ID de l'UI de connexion
data = login_details,  # Base de données des utilisateurs
user_col = "username",  # Colonne contenant les noms d'utilisateurs
pwd_col = "password",  # Colonne contenant les mots de passe
logout = reactive(input$logout),  # Gère la déconnexion
hide_on_login = TRUE  # Cache l'interface de connexion après la connexion
)
# UI Page Avis rapporteur
output$avisPanel <- renderUI({
# Si l'utilisateur est connecté, afficher la page des avis
if (user_info()$logged_in) {
sidebarLayout(
sidebarPanel(
actionButton("buttonMenu", label = "Menu"),
actionButton("buttonSave", label = "Sauvegarder"),
actionButton("checkTermine", label = "J'ai terminé"),
selectInput("selectAvis", label = "Avis", choices = list("","Très favorable", "Favorable", "Réservé"), selected = NULL),
checkboxGroupInput(
"checkGroupeModalites",
"Modalités d'attribution",
choices = list("M1 (Ens)" = 1, "M2 (Rech)" = 2, "M3 (OIP)" = 3, "M4 (Diff)" = 4, "M5 (Eur)" = 5, "M6 (Coop)" = 6, "M7 (Invest)" = 7)
),
actionButton("buttonUploadPreRapport", label = "Déposer un pré-rapport (PDF)")
),
mainPanel(
actionButton("buttonTelechargeDossier", label = "Télécharger le dossier du/de la candidat.e (PDF)"),
card("PDF ou texte comprenant les informations de la candidature")
)
)
} else {
# Message si l'utilisateur n'est pas connecté
mainPanel("Vous n'êtes pas connecté. Connectez-vous pour accéder à cette page.")
}
})
}
shinyApp(ui = ui, server = server)
runApp('app_projet.R')
runApp('app_projet.R')
library(digest)
password <- "monMotDePasseSecurise"
hashed_password <- digest(password, algo = "sha256")
print(hashed_password)
hashed_password_md5 <- digest(password, algo = "md5")
print(hashed_password_md5)
# Hachage du mot de passe lors de l'inscription de l'utilisateur
mot_de_passe <- "monMotDePasseSecurise"
mot_de_passe_hache <- digest(mot_de_passe, algo = "sha256")
# Lors de la connexion de l'utilisateur
mot_de_passe_entre <- "monMotDePasseSecurise"
mot_de_passe_entre_hache <- digest(mot_de_passe_entre, algo = "sha256")
# Vérification que les deux hachages correspondent
if (mot_de_passe_entre_hache == mot_de_passe_hache) {
print("Authentification réussie")
} else {
print("Identifiants incorrects")
}
library(shiny)
library(bslib)
library(markdown)
library(shinyjs)
library(digest)
users <- data.frame(
username = c("user1", "user2"),
password = sapply(c("password1", "password2"), digest(algo = "sha256")), # Mots de passe hashés
stringsAsFactors = FALSE
)
runApp('app_projet.R')
knitr::opts_chunk$set(echo = FALSE)
source("TP.R")
plot(data$Age, data$Satisfaction,
xlab = "Age",
ylab = "Satisfaction",
main = "Nuage de points : Age vs Satisfaction",
pch = 19, col = "blue")
# Séparer les données en fonction du sexe (Femmes et Hommes)
data_split <- split(data, data$Sexe)
# Tracer les nuages de points pour chaque groupe
plot(data_split$Femme$Age, data_split$Femme$Satisfaction,
col = "red", pch = 16,
xlab = "Age", ylab = "Satisfaction",
main = "Nuage de points : Satisfaction vs Age")
# Ajouter les points des hommes sur le même graphique
points(data_split$Homme$Age, data_split$Homme$Satisfaction,
col = "blue", pch = 16)
# Ajouter une légende
legend("topright", legend = c("Femmes", "Hommes"),
col = c("red", "blue"), pch = 16)
# Tracer les nuages de points pour chaque groupe
plot(data_split$Femme$Age, data_split$Femme$Satisfaction,
col = "red", pch = 16,
xlab = "Age", ylab = "Satisfaction",
main = "Nuage de points : Satisfaction vs Age")
# Ajouter les points des hommes sur le même graphique
points(data_split$Homme$Age, data_split$Homme$Satisfaction,
col = "blue", pch = 16)
# Ajouter une légende
legend(legend = c("Femmes", "Hommes"),
col = c("red", "blue"), pch = 16)
# Tracer les nuages de points pour chaque groupe
plot(data_split$Femme$Age, data_split$Femme$Satisfaction,
col = "red", pch = 16,
xlab = "Age", ylab = "Satisfaction",
main = "Nuage de points : Satisfaction vs Age")
# Ajouter les points des hommes sur le même graphique
points(data_split$Homme$Age, data_split$Homme$Satisfaction,
col = "blue", pch = 16)
# Ajouter une légende
legend("topleft", legend = c("Femmes", "Hommes"),
col = c("red", "blue"), pch = 16)
names(data)
# Calculer les moyennes des deux variables
mean_age <- mean(data$Age)
mean_satisfaction <- mean(data$Satisfaction)
# Calculer les écarts à la moyenne pour chaque observation
ecart_age <- data$Age - mean_age
ecart_satisfaction <- data$Satisfaction - mean_satisfaction
# Multiplier les écarts pour chaque observation
produit_ecarts <- ecart_age * ecart_satisfaction
# Calculer la somme des produits des écarts
somme_produit_ecarts <- sum(produit_ecarts)
# Calculer la covariance
covariance_manuelle <- somme_produit_ecarts / (length(data$Age) - 1)
# Afficher la covariance calculée manuellement
covariance_manuelle
# Comparer avec celle calculée par la fonction cov() de R
covariance_r <- cov(data$Age, data$Satisfaction)
# Afficher la covariance calculée par R
covariance_r
ecart_type_age <- sd(data$Age)
ecart_type_satisfaction <- sd(data$Satisfaction)
# Calcul du coefficient de corrélation
correlation_manuelle <- covariance_r / (ecart_type_age * ecart_type_satisfaction)
correlation_manuelle
# on compare avec la fonction cor() de R
correlation_r <- cor(data$Age, data$Satisfaction)
correlation_r
names(data)
# on sélectionne uniquement les variables numériques sauf "Nbenfant"
data_numeric <- data[, sapply(data, is.numeric)]
data_numeric <- data_numeric[, !(names(data_numeric) %in% c("Nbenfant"))]  # Exclure la colonne "Nbenfant"
data_numeric
# Calcul de la matrice de corrélation entre les variables numériques restantes
matrice_corr <- cor(data_numeric)
matrice_corr
scatterplotMatrix(data_numeric, spread = 0.5, main = "Matrice de Nuages de Points des Variables Numériques")
library(car)
scatterplotMatrix(data_numeric, spread = 0.5, main = "Matrice de Nuages de Points des Variables Numériques")
warnings()
scatterplotMatrix(data_numeric, main = "Matrice de Nuages de Points des Variables Numériques")
library(car)
scatterplotMatrix(data_numeric, main = "Matrice de Nuages de Points des Variables Numériques")
library(car)
scatterplotMatrix(data_numeric, main = "Matrice de Nuages de Points des Variables Numériques")
